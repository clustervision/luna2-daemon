#!/bin/bash

{% autoescape None %}
export LUNA_IMAGEFILE=''
export LUNA_OSIMAGE=''
export LUNA_TOKEN="{{ LUNA_TOKEN }}"
export DECODE=""
## ----------- useful variable exports -----------
export _HOSTNAME="{{ NODE_NAME }}"
export _SYSTEMROOT="{{ LUNA_SYSTEMROOT }}"
export _BOOTIF=${LUNA_BOOTIF}
## -----------------------------------------------

{% if VERIFY_CERTIFICATE|lower == "false" or VERIFY_CERTIFICATE|lower == "no" -%}
export INSECURE='--insecure'
{% endif %}
if [ -n "${LUNA_BOOTIF}" ]; then
    export INTERFACE="--interface ${LUNA_BOOTIF}"
fi
if [ "$(echo LUNA_API_PROTOCOL | grep ':')" ]; then
    export LUNA_URL="{{ LUNA_API_PROTOCOL }}://[{{ LUNA_CONTROLLER }}]:{{ LUNA_API_PORT }}"
else
    export LUNA_URL="{{ LUNA_API_PROTOCOL }}://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}"
fi

base64 --help &> /dev/null
if [ "$?" == "0" ]; then
    DECODE=1
fi
if [ ! "$DECODE" ]; then
    echo "Luna2: --WARNING-- base64 decoder not available. This will impair the installer"
fi

function update_status {
    json='{"monitor": { "status": { "{{ NODE_NAME }}": { "state": "'$1'" } } } }'
    curl $INTERFACE $INSECURE -X POST -H "x-access-tokens: $LUNA_TOKEN" -H "Content-Type: application/json" -d "$json" -s "${LUNA_URL}/monitor/node/{{ NODE_NAME }}"
}

function update_system_info {
    dmidecode --help &> /dev/null
    ret=$?
    if [ "$ret" == "0" ]; then
        vendor=$(dmidecode -s system-manufacturer)
        assettag=$(dmidecode -s system-serial-number)
        json='{"config": {"node": { "{{ NODE_NAME }}": { "vendor": "'$vendor'", "assettag": "'$assettag'" } } } }'
        curl $INTERFACE $INSECURE -X POST -H "x-access-tokens: $LUNA_TOKEN" -H "Content-Type: application/json" -d "$json" -s "${LUNA_URL}/config/node/{{ NODE_NAME }}"
    else
        echo "Luna2: dmidecode not found and could therefor not update system information"
    fi
}

function update_node_ip {
    json='{"config": {"node": {"{{ NODE_NAME }}": {"name": "{{ NODE_NAME }}", "interfaces": [{"interface": "BOOTIF", "force": true, "ipaddress": "'$1'"}]}}}}'
    curl $INTERFACE $INSECURE -X POST -H "x-access-tokens: $LUNA_TOKEN" -H "Content-Type: application/json" -d "$json" -s "${LUNA_URL}/config/node/{{ NODE_NAME }}"
}

function lunainit {
    if [ ! -d /lunatmp ]; then
        mkdir /lunatmp
    fi
    if [ ! -d /{{ LUNA_SYSTEMROOT }} ]; then
        echo "Luna2: Warning! {{ LUNA_SYSTEMROOT }} did not exist! it's unexpected. I will create it and try to continue"
        mkdir /{{ LUNA_SYSTEMROOT }}
    fi
}

function dynamic_ip_check {
    if [ "${LUNA_BOOTPROTO}" == "dhcp" ]; then
        echo "Luna2: I need to update luna to reflect my dynamic IP address"
        if [ "${LUNA_BOOTIF}" ]; then
            MY_IP=$(ip a show dev ${LUNA_BOOTIF}|grep -oE "inet [0-9\.]+"|grep -oE "[0-9\.]+")
            if [ "${MY_IP}" ]; then
                update_node_ip $MY_IP
            else
                echo "Luna2: Could not figure out my IP address"
            fi
        else
            echo "Luna2: BOOTIF is not defined"
        fi
    fi
}

function unpack_imagefile {
    update_status "install.unpack"
    echo "Luna2: Un-packing imagefile"
    TAR_LOG_FILE=/tmp/tar.out
    if [ -f {{ LUNA_SYSTEMROOT }}/{{ LUNA_IMAGEFILE }} ]; then
        cd /{{ LUNA_SYSTEMROOT }}

        # We need the full /etc/{passwd,group} in order
        # to properly extract ACLs from the archive

        mv /etc/passwd /etc/passwd.back
        mv /etc/group /etc/group.back
        tar -I lbzip2 -xf ./{{ LUNA_IMAGEFILE }} ./etc/passwd ./etc/group -C / -P
       
        if grep "^tmpfs" /proc/mounts | grep -q -e sysroot -e root -e {{ LUNA_SYSTEMROOT }}
        then
            tar -I lbzip2 --no-acls -xf ./{{ LUNA_IMAGEFILE }} 2> $TAR_LOG_FILE && export LUNA_OSIMAGE="yes"
            ret=$?
        else
            tar -I lbzip2 --acls -xf ./{{ LUNA_IMAGEFILE }} 2> $TAR_LOG_FILE && export LUNA_OSIMAGE="yes"
            ret=$?
        fi

        if [ "$ret" != "0" ]; then
            echo "Luna2: Error unpacking {{ LUNA_IMAGEFILE }}!"
            if [ -f $TAR_LOG_FILE ]; then
                echo "------------------------------------[head]-------------------------------------"
                awk 'NR<11' $TAR_LOG_FILE
                echo "-------------------------------------------------------------------------------"
                echo "Luna2: more details in $TAR_LOG_FILE"
            fi
            exit 1
        fi

        # Restore dracut's default /etc/{passwd,group}
        mv /etc/passwd.back /etc/passwd
        mv /etc/group.back /etc/group

        rm -f /{{ LUNA_SYSTEMROOT }}/{{ LUNA_IMAGEFILE }}
    else
        echo "Luna2: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
}

trap unpack_imagefile SIGUSR1


function customscript {
    if [ ! "{{ LUNA_SCRIPTS }}" ]; then
        return 1
    fi
    if [ ! "$1" ]; then
        echo "Luna2: customerscript requires an argument"
        return 0
    fi
    local STAGE=$1
    local SCRIPTS=$(echo {{ LUNA_SCRIPTS }} | tr ',' ' ')
    for SCRIPT in $SCRIPTS; do
        if [ -f /lunatmp/scripts/${SCRIPT}-${STAGE}.sh ]; then
            bash /lunatmp/scripts/${SCRIPT}-${STAGE}.sh
            LUNARET=$?
            if [ "$LUNARET" != "0" ]; then
                echo "Luna2: ${SCRIPT} ${STAGE} script exited with exit code $LUNARET. Stop install."
                exit 1
            fi
        else
            echo "Luna2: Warning - ${SCRIPT}-${STAGE}.sh not found"
        fi
    done
}

function prescript {
    echo "Luna2: Running prescript"
    update_status "install.prescript"
cat << 'LUNAEOF' > /lunatmp/prescript.sh
{{ LUNA_PRESCRIPT | b64decode }}
## do not remove below line
## SCRIPT PRESCRIPT CODE SEGMENT
LUNAEOF
    bash /lunatmp/prescript.sh
    LUNARET=$?
    if [ "$LUNARET" != "0" ]; then
        echo "Luna2: Pre script exited with exit code $LUNARET. Stop install."
        exit 1
    fi
    customscript pre
}

function partscript {
    echo "Luna2: Running partscript"
    update_status "install.partscript"
cat << 'LUNAEOF' > /lunatmp/partscript.sh
{{ LUNA_PARTSCRIPT | b64decode }}
## do not remove below line
## SCRIPT PARTSCRIPT CODE SEGMENT
LUNAEOF
    bash /lunatmp/partscript.sh
    LUNARET=$?
    if [ "$LUNARET" != "0" ]; then
        echo "Luna2: Part script exited with exit code $LUNARET. Stop install."
        exit 1
    fi
    customscript part
}

function postscript {
    echo "Luna2: Running postscript"
    update_status "install.postscript"
cat << 'LUNAEOF' > /lunatmp/postscript.sh
{{ LUNA_POSTSCRIPT | b64decode }}
## do not remove below line
## SCRIPT POSTSCRIPT CODE SEGMENT
LUNAEOF
    bash /lunatmp/postscript.sh
    LUNARET=$?
    if [ "$LUNARET" != "0" ]; then
        echo "Luna2: Post script exited with exit code $LUNARET. Stop install."
        exit 1
    fi
    customscript post
}

function get_encapsulated_content {
    FILE=$1
    if [ ! -s $FILE ]; then
        echo
        return 1
    fi
    CONTENT=$(cat $FILE)
    CONTENT=$(echo "${CONTENT:1:-1}")

    BASH_COMPAT=4.2
    CONTENT=$(echo "${CONTENT//\\\\/\\}")

    awk '{
      n = split($0, t, "\\\\n")
      for (i = 0; ++i <= n;)
#        print i, t[i]
        print t[i]
      }' <<< $CONTENT
}

function get_json_segment {
    FILE=$1
    SEGMENT=$2
    NODASH=$3
    if [ ! -s $FILE ]; then
        echo
        return 1
    fi
    if [ "$NODASH" ]; then
       cat $FILE | grep -oE '".[^"]+"'|grep -A1 $SEGMENT|grep -v '"'$SEGMENT'"'
    else
       cat $FILE | grep -oE '".[^"]+"'|grep -A1 $SEGMENT|grep -v '"'$SEGMENT'"' | grep -v '^\-\-'
    fi
}

function node_secrets {
    update_status "install.secrets"

    curl $INTERFACE $INSECURE -H "x-access-tokens: $LUNA_TOKEN" -s "${LUNA_URL}/config/secrets/node/{{ NODE_NAME }}" | grep -v '"message":' > /lunatmp/node.secrets.json
    get_json_segment /lunatmp/node.secrets.json 'path' > /lunatmp/node.secrets.files.dat
    get_json_segment /lunatmp/node.secrets.json 'content' 'nodash' > /lunatmp/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r line; do
        if [ "$(echo $line)" == "--" ]; then
           TEL=$[TEL+1]
       else
           echo $line >> /lunatmp/node.secrets.content${TEL}.dat
       fi
    done < /lunatmp/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r file; do
        file=$(echo "${file:1:-1}")
        echo "Luna2: Node secret path: [$file]"
        if [ "$file" ]; then
            if [ "$DECODE" ]; then
                get_encapsulated_content /lunatmp/node.secrets.content${TEL}.dat | base64 -d > /{{ LUNA_SYSTEMROOT }}/$file
            else
                get_encapsulated_content /lunatmp/node.secrets.content${TEL}.dat > /{{ LUNA_SYSTEMROOT }}/$file
            fi
            chmod 600 /{{ LUNA_SYSTEMROOT }}/$file 2> /dev/null
            TEL=$[TEL+1]
        fi
    done < /lunatmp/node.secrets.files.dat
}

function node_roles {
    update_status "install.roles"

    if [ ! -d /{{ LUNA_SYSTEMROOT }}/usr/local/roles ]; then
        mkdir -p /{{ LUNA_SYSTEMROOT }}/usr/local/roles
    fi
    local ROLES=$(echo {{ LUNA_ROLES }} | tr ',' ' ')
    for ROLE in $ROLES; do
        echo "Luna2: Preparing node role: [$ROLE]"
        curl $INTERFACE $INSECURE -H "x-access-tokens: $LUNA_TOKEN" -s "${LUNA_URL}/boot/roles/${ROLE}" | grep -v '"message":' > /lunatmp/node.roles.json
        get_json_segment /lunatmp/node.roles.json 'unit' > /lunatmp/node.roles.unit.dat
        get_json_segment /lunatmp/node.roles.json 'script' > /lunatmp/node.roles.script.dat

        if [ "$DECODE" ]; then
            get_encapsulated_content /lunatmp/node.roles.script.dat | base64 -d | awk '{if (NR==1 && NF==0) next};1' > /{{ LUNA_SYSTEMROOT }}/usr/local/roles/${ROLE}
            get_encapsulated_content /lunatmp/node.roles.unit.dat | base64 -d > /{{ LUNA_SYSTEMROOT }}/etc/systemd/system/luna-${ROLE}.service
        else
            get_encapsulated_content /lunatmp/node.roles.script.dat | awk '{if (NR==1 && NF==0) next};1' > /{{ LUNA_SYSTEMROOT }}/usr/local/roles/${ROLE}
            get_encapsulated_content /lunatmp/node.roles.unit.dat > /{{ LUNA_SYSTEMROOT }}/etc/systemd/system/luna-${ROLE}.service
        fi
        chmod 750 /{{ LUNA_SYSTEMROOT }}/usr/local/roles/${ROLE} 2> /dev/null
        chroot /{{ LUNA_SYSTEMROOT }} /bin/bash -c "systemctl enable luna-${ROLE}"
    done
}

function node_scripts {
    update_status "install.scripts"

    if [ ! -d /lunatmp/scripts ]; then
        mkdir -p /lunatmp/scripts
    fi
    local SCRIPTS=$(echo {{ LUNA_SCRIPTS }} | tr ',' ' ')
    for SCRIPT in $SCRIPTS; do
        echo "Luna2: Preparing node script: [$SCRIPT]"
        curl $INTERFACE $INSECURE -H "x-access-tokens: $LUNA_TOKEN" -s "${LUNA_URL}/boot/scripts/${SCRIPT}" | grep -v '"message":' > /lunatmp/node.scripts.json
        get_json_segment /lunatmp/node.scripts.json 'prescript' > /lunatmp/node.scripts.pre.dat
        get_json_segment /lunatmp/node.scripts.json 'partscript' > /lunatmp/node.scripts.part.dat
        get_json_segment /lunatmp/node.scripts.json 'postscript' > /lunatmp/node.scripts.post.dat

        if [ "$DECODE" ]; then
            for item in pre part post; do
                get_encapsulated_content /lunatmp/node.scripts.${item}.dat | base64 -d | awk '{if (NR==1 && NF==0) next};1' > /lunatmp/scripts/${SCRIPT}-${item}.sh
            done
        else
            for item in pre part post; do
                get_encapsulated_content /lunatmp/node.scripts.${item}.dat | awk '{if (NR==1 && NF==0) next};1' > /lunatmp/scripts/${SCRIPT}-${item}.sh
            done
        fi
        chmod 750 /lunatmp/scripts/*.sh 2> /dev/null
    done
}

## this section contains the download function calls
## it will be rendered based on plugins
## do not remove below line
## FETCH CODE SEGMENT


function download_image {
    update_status "install.download"
    for method in {{ PROVISION_METHOD }} {{ PROVISION_FALLBACK }}; do
        case $method in
            {{ PROVISION_METHOD }})
                if download_{{ PROVISION_METHOD }}; then
                    return 0
                fi
                ;;
            {{ PROVISION_FALLBACK }})
                if download_{{ PROVISION_FALLBACK }}; then
                    return 0
                fi
                ;;
            *)
                echo "Luna2: No suitable provision method available for $method"
                ;;
        esac
    done
    return 1
}

# -------------------------------- bmc related functions ----------------------------
{% if LUNA_SETUPBMC %}
function config_bmc {
    NETCHANNEL=$1
    IPADDRESS=$2
    NETMASK=$3
    GATEWAY=$4
    VLANID=$5
    MGMTCHANNEL=$6
    USERID=$7
    USERNAME=$8
    PASSWORD=$9
    UNMANAGED=$10
## do not remove below line
## BMC CODE SEGMENT
}

function bmcsetup {
    echo "Luna2: bmcsetup"
    update_status "install.setupbmc"
    config_bmc "{{ LUNA_BMC['netchannel'] }}" "{{ LUNA_BMC['ipaddress'] }}" "{{ LUNA_BMC['netmask'] }}" "{{ LUNA_BMC['gateway'] }}" "{{ LUNA_BMC['vlanid'] }}" "{{ LUNA_BMC['mgmtchannel'] }}" "{{ LUNA_BMC['userid'] }}" "{{ LUNA_BMC['username'] }}" "{{ LUNA_BMC['password'] }}" "{{ LUNA_UNMANAGED_BMC_USERS }}"
}
{% endif %}

# -------------------------------- network related functions ----------------------------
function config_network_init {
    DEVICE=$1
    VLANPARENT=$2
    VLANID=$3
    TYPE=$4
    ZONE=$5
    OPTIONS=$6
## do not remove below line
## NETWORK INIT CODE SEGMENT
}

function config_hostname {
    HOSTNAME=$1
## do not remove below line
## HOSTNAME CODE SEGMENT
}

# ipv4
function config_interface {
    DEVICE=$1
    IPADDR=$2
    PREFIX=$3
    NETMASK=$4
    VLANPARENT=$5
    VLANID=$6
    TYPE=$7
    ZONE=$8
    OPTIONS=$9
## do not remove below line
## INTERFACE CODE SEGMENT
}

function config_gateway {
    DEVICE=$1
    GATEWAY=$2
    METRIC=$3
## do not remove below line
## GATEWAY CODE SEGMENT
}

function config_dns {
    DEVICE=$1
    SEARCH=$2
    NAMESERVER=$3
## do not remove below line
## DNS CODE SEGMENT
}

# ipv6
function config_interface_ipv6 {
    DEVICE=$1
    IPADDR=$2
    PREFIX=$3
    NETMASK=$4
    VLANPARENT=$5
    VLANID=$6
    TYPE=$7
    ZONE=$8
    OPTIONS=$9
## do not remove below line
## INTERFACE IPv6 CODE SEGMENT
}

function config_gateway_ipv6 {
    DEVICE=$1
    GATEWAY=$2
    METRIC=$3
## do not remove below line
## GATEWAY IPv6 CODE SEGMENT
}

function config_dns_ipv6 {
    DEVICE=$1
    SEARCH=$2
    NAMESERVER=$3
## do not remove below line
## DNS IPv6 CODE SEGMENT
}

function collect_mac_n_name_net {
    echo "Luna2: collecting interfaces and mac addresses"
    ip a 2> /dev/null|grep -oE "^[0-9]:\s*.[^:]+|^\s*link/ether [0-9a-fA-F:]+"|sed -e 's/^[0-9]: /~/g'|tr '\n' ' '|tr '~' '\n'|awk '{ print $1"="$3 }'|grep -v '=$' > /tmp/mac_n_name.dat
    if [ ! -s /tmp/mac_n_name.dat ]; then
        ifconfig -a 2>/dev/null |grep -oE "^.[^ :]+:|^\s*ether\s*[0-9a-fA-F:]+"|sed -e ':a;N;$!ba;s/:\n/ /g'|awk '{ print $1"="$3 }'|grep -v '=$' > /tmp/mac_n_name.dat
    fi
    if [ ! -s /tmp/mac_n_name.dat ]; then
        (for mac_interface in $(ls /sys/class/net 2>/dev/null); do echo -n ${mac_interface}'='; cat /sys/class/net/${mac_interface}/address; done)  > /tmp/mac_n_name.dat
    fi
}

function get_interface_by_mac {
    local get_interface_name=$1
    local get_interface_mac=$2
    if [ ! "$get_interface_name" ] || [ ! "$get_interface_mac" ]; then
        echo $get_interface_name
        return
    fi
    found_interface=$(grep -iw "$get_interface_mac" /tmp/mac_n_name.dat 2> /dev/null | grep -m1 . | awk -F'=' '{ print $1 }' | grep -v '^$' || echo $get_interface_name)
    echo "Luna2: get_interface_by_mac: $get_interface_name, $get_interface_mac -> $found_interface" 1>&2
    echo $found_interface
}

function change_net {
    echo "Luna2: apply network settings"
    update_status "install.setnet"
    [ -z "$LUNA_OSIMAGE" ] && echo "Luna2: No OsImage. Exiting." && return 0
    config_hostname "{{ NODE_HOSTNAME }}"
    {% for interface in LUNA_INTERFACES %}
        {%- if interface == PROVISION_INTERFACE %}
    # ${LUNA_BOOTIF} variable should be defined in dracut environment
    # during the boot proces based on mac address: MAC
    if [ -n "${LUNA_BOOTIF}" ]; then
        interface_name=${LUNA_BOOTIF}
    else
        interface_name={{ interface }}
    fi
    interface_bootif=$interface_name
        {%- else %}
            {%- if 'bond_mode' in LUNA_INTERFACES[interface] and LUNA_INTERFACES[interface]['bond_mode'] %}
    interface_name={{ interface }}
            {%- elif 'macaddress' in LUNA_INTERFACES[interface] and LUNA_INTERFACES[interface]['macaddress'] %}
    interface_name=$(get_interface_by_mac "{{ interface }}" "{{ LUNA_INTERFACES[interface]['macaddress'] }}")
            {%- elif interface.split(':') | count > 1 %}
    interface_name=$(get_interface_by_mac "non_existing" "{{ interface }}")
            {%- else %}
    interface_name={{ interface }}
            {%- endif %}
        {%- endif %}
        {%- if LUNA_INTERFACES[interface]['vlan_parent'] == PROVISION_INTERFACE %}
    parent_name=$interface_bootif
        {%- elif 'vlan_parent' in LUNA_INTERFACES[interface] and LUNA_INTERFACES[interface]['vlan_parent'].split(':') | count > 1 %}
    parent_name=$(get_interface_by_mac "non_existing" "{{ LUNA_INTERFACES[interface]['vlan_parent'] }}")
        {%- else %}
    parent_name={{ LUNA_INTERFACES[interface]['vlan_parent'] }}
        {%- endif %}
    ######### {{ interface }} #########

      # yes, LUNAEOF without ticks.
      cat << LUNAEOF > "/lunatmp/interface_${interface_name}.conf"
## do not remove below line
## INTERFACE TEMPLATE SEGMENT
LUNAEOF

      if [ -s "/lunatmp/interface_${interface_name}.conf" ]; then
        interface_file=$(grep '^#FILE' "/lunatmp/interface_${interface_name}.conf"| awk -F'#FILE ' '{ print $2 }')
	if [ "${interface_file}" ]; then
            cp "/lunatmp/interface_${interface_name}.conf" ${interface_file}
            chown root:root ${interface_file}
            chmod 600 ${interface_file}
        fi
      if [ ! "${interface_file}" ]; then
        cat << 'LUNAEOF' > /lunatmp/interface_options.txt
{{ LUNA_INTERFACES[interface]['options'] | b64decode }}
LUNAEOF
        OPTIONS=$(cat /lunatmp/interface_options.txt)
        rm -f /lunatmp/interface_options.*
        # ---------------- INIT ---------------------------
        config_network_init "${interface_name}" "${parent_name}" "{{ LUNA_INTERFACES[interface]['vlanid'] }}" "{{ LUNA_INTERFACES[interface]['type'] }}" "{{ LUNA_INTERFACES[interface]['zone'] }}" "${OPTIONS}"
        # ---------------- IPv4 ---------------------------
        {%- if LUNA_INTERFACES[interface]['ipaddress'] %}
        if ([ "{{ interface }}" == "{{ PROVISION_INTERFACE }}" ] &&  [ "${LUNA_BOOTPROTO}" == "dhcp" ]) || [ "{{ LUNA_INTERFACES[interface]['dhcp'] }}" ]; then
            echo "Using DHCP for IPv4 config"
            config_interface "${interface_name}" "dhcp"
        else
            # -- we call a function below that's being generated by interface plugin
            config_interface "${interface_name}" "{{ LUNA_INTERFACES[interface]['ipaddress'] }}" "{{ LUNA_INTERFACES[interface]['prefix'] }}" "{{ LUNA_INTERFACES[interface]['netmask'] }}" "${parent_name}" "{{ LUNA_INTERFACES[interface]['vlanid'] }}"  "{{ LUNA_INTERFACES[interface]['type'] }}" "{{ LUNA_INTERFACES[interface]['zone'] }}" "${OPTIONS}"
            config_gateway "${interface_name}" "{{ LUNA_INTERFACES[interface]['gateway'] }}" "{{ LUNA_INTERFACES[interface]['gateway_metric'] }}"
        fi
        config_dns "${interface_name}" "{{ DOMAIN_SEARCH }}" "{{ LUNA_INTERFACES[interface]['nameserver_ip'] }}"
        # --
        {%- endif %}
        # ---------------- IPv6 ---------------------------
        {%- if LUNA_INTERFACES[interface]['ipaddress_ipv6'] %}
        if ([ "{{ interface }}" == "{{ PROVISION_INTERFACE }}" ] && [ "${LUNA_BOOTPROTO}" == "dhcp" ]) || [ "{{ LUNA_INTERFACES[interface]['dhcp'] }}" ]; then
            echo "Using DHCP for IPv6 config"
            config_interface_ipv6 "${interface_name}" "dhcp"
        else
            # -- we call a function below that's being generated by interface plugin
            config_interface_ipv6 "${interface_name}" "{{ LUNA_INTERFACES[interface]['ipaddress_ipv6'] }}" "{{ LUNA_INTERFACES[interface]['prefix_ipv6'] }}" "{{ LUNA_INTERFACES[interface]['netmask_ipv6'] }}" "${parent_name}" "{{ LUNA_INTERFACES[interface]['vlanid'] }}" "{{ LUNA_INTERFACES[interface]['type'] }}" "{{ LUNA_INTERFACES[interface]['zone'] }}" "${OPTIONS}"
            config_gateway_ipv6 "${interface_name}" "{{ LUNA_INTERFACES[interface]['gateway_ipv6'] }}" "{{ LUNA_INTERFACES[interface]['gateway_metric'] }}"
        fi
        config_dns_ipv6 "${interface_name}" "{{ DOMAIN_SEARCH }}" "{{ LUNA_INTERFACES[interface]['nameserver_ip_ipv6'] }}"
        # --
        {%- else %}
        config_interface_ipv6 "${interface_name}" "linklocal"
        {%- endif %}
      fi
    fi
    {% endfor %}
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /{{ LUNA_SYSTEMROOT }}/tmp/fix_capabilities.lst << 'LUNAEOF'
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
LUNAEOF
    chroot /{{ LUNA_SYSTEMROOT }} /bin/bash -c " \
        while read FILE d CAP; do \
            /usr/sbin/setcap \${CAP} \${FILE}; \
        done < /tmp/fix_capabilities.lst \
    " > /dev/null 2>&1
    rm -rf /{{ LUNA_SYSTEMROOT }}/tmp/fix_capabilities.lst
}

function restore_selinux_context {
    SEPOLICY_FILE=/etc/selinux/targeted/contexts/files/file_contexts
    if [ -f /{{ LUNA_SYSTEMROOT }}/${SEPOLICY_FILE} ]; then
        chroot /{{ LUNA_SYSTEMROOT }} /bin/bash -c "load_policy -i; setfiles -r / ${SEPOLICY_FILE} /" > /{{ LUNA_SYSTEMROOT }}/tmp/restore_con.out 2>&1
    fi
}

function cleanup {
    rm -rf /{{ LUNA_SYSTEMROOT }}/tmp/* &> /dev/null
}

echo "Luna2: installer script"
echo "==============================================================================="
echo "Luna2: nodename is {{ NODE_NAME }}, member of {{ LUNA_GROUP }}, distribution is {{ LUNA_DISTRIBUTION }} {{ LUNA_OSRELEASE }}"
echo "==============================================================================="
lunainit
dynamic_ip_check
{% if LUNA_SCRIPTS %}
node_scripts
{% endif %}
prescript
{% if LUNA_SETUPBMC %}
bmcsetup
{% endif %}
partscript
download_image
unpack_imagefile
collect_mac_n_name_net
change_net
node_secrets
postscript
{% if LUNA_ROLES %}
node_roles
{% endif %}
fix_capabilities
restore_selinux_context
update_system_info
cleanup
update_status "install.success"

# for debugging purposes
#mkdir /{{ LUNA_SYSTEMROOT }}/root/luna2
#cd /lunatmp
#cat $0 > /{{ LUNA_SYSTEMROOT }}/root/luna2/installer.sh
#cp /lunatmp/*.sh /{{ LUNA_SYSTEMROOT }}/root/luna2/

{% endautoescape  %}
