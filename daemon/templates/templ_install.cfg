#!/bin/bash

{% autoescape None %}
export LUNA_IMAGEFILE=''
export LUNA_OSIMAGE=''
export LUNA_TOKEN="{{ LUNA_TOKEN }}"
export DECODE=""

base64 --help &> /dev/null
if [ "$?" == "0" ]; then
    DECODE=1
fi
if [ ! "$DECODE" ]; then
    echo "Luna2: --WARNING-- base64 decoder not available. This will impair the installer"
fi

function update_status {
    json='{"monitor": { "status": { "{{ NODE_NAME }}": { "state": "'$1'" } } } }'
    curl -X POST -H "x-access-tokens: $LUNA_TOKEN" -H "Content-Type: application/json" -d "$json" -s "{{ LUNA_API_PROTOCOL }}://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/monitor/status/{{ NODE_NAME }}"
}

function lunainit {
    if [ ! -d /lunatmp ]; then
        mkdir /lunatmp
    fi
    if [ ! -d /{{ LUNA_SYSTEMROOT }} ]; then
        mkdir /{{ LUNA_SYSTEMROOT }}
    fi
}

function unpack_imagefile {
    update_status "install.unpack"
    echo "Luna2: Un-packing imagefile"
    if [ -n {{ LUNA_SYSTEMROOT }}/{{ LUNA_IMAGEFILE }} ]; then
        cd /{{ LUNA_SYSTEMROOT }}

        # We need the full /etc/{passwd,group} in order
        # to properly extract ACLs from the archive

        mv /etc/passwd /etc/passwd.back
        mv /etc/group /etc/group.back
        tar -I lbzip2 -xf ./{{ LUNA_IMAGEFILE }} ./etc/passwd ./etc/group -C / -P
       
        if grep "^tmpfs" /proc/mounts | grep -q -e sysroot -e root -e {{ LUNA_SYSTEMROOT }}
        then
            tar -I lbzip2 --no-acls -xf ./{{ LUNA_IMAGEFILE }} 2> /tmp/tar.out && export LUNA_OSIMAGE="yes"
            ret=$?
        else
            tar -I lbzip2 --acls -xf ./{{ LUNA_IMAGEFILE }} 2> /tmp/tar.out && export LUNA_OSIMAGE="yes"
            ret=$?
        fi

        # Restore dracut's default /etc/{passwd,group}
        mv /etc/passwd.back /etc/passwd
        mv /etc/group.back /etc/group

        if [ "$ret" == "0" ]; then
            rm -rf /{{ LUNA_SYSTEMROOT }}/{{ LUNA_IMAGEFILE }}
        else
            echo "Luna2: something went wrong unpacking the image. I left it in /{{ LUNA_SYSTEMROOT }} for investigation"
        fi
    else
        echo "Luna2: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
}

trap unpack_imagefile SIGUSR1


function prescript {
    echo "Luna2: Running prescript"
    update_status "install.prescript"
cat << EOF > /lunatmp/prescript.b64
{{ LUNA_PRESCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /lunatmp/prescript.b64 | base64 -d > /lunatmp/prescript.sh 2> /dev/null || cat /lunatmp/prescript.b64 > /lunatmp/prescript.sh 
        bash /lunatmp/prescript.sh
    fi
## do not remove below line
## INSTALL PRESCRIPT CODE SEGMENT
}

function partscript {
    echo "Luna2: Running partscript"
    update_status "install.partscript"
cat << EOF > /lunatmp/partscript.b64
{{ LUNA_PARTSCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /lunatmp/partscript.b64 | base64 -d > /lunatmp/partscript.sh 2> /dev/null || cat /lunatmp/partscript.b64 > /lunatmp/partscript.sh 
        bash /lunatmp/partscript.sh
    fi
## do not remove below line
## INSTALL PARTSCRIPT CODE SEGMENT
}

function postscript {
    echo "Luna2: Running postscript"
    update_status "install.postscript"
cat << EOF > /lunatmp/postscript.b64
{{ LUNA_POSTSCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /lunatmp/postscript.b64 | base64 -d > /lunatmp/postscript.sh 2> /dev/null || cat /lunatmp/postscript.b64 > /lunatmp/postscript.sh 
        bash /lunatmp/postscript.sh
    fi
## do not remove below line
## INSTALL POSTSCRIPT CODE SEGMENT
}

function get_secret_content {
    FILE=$1
    if [ ! -s $FILE ]; then
        echo
        return 1
    fi
    CONTENT=$(cat $FILE)
    CONTENT=$(echo "${CONTENT:1:-1}")

    BASH_COMPAT=4.2
    CONTENT=$(echo "${CONTENT//\\\\/\\}")

    awk '{
      n = split($0, t, "\\\\n")
      for (i = 0; ++i <= n;)
#        print i, t[i]
        print t[i]
      }' <<< $CONTENT
}

function node_secrets {
    update_status "install.secrets"

    curl -H "x-access-tokens: $LUNA_TOKEN" -s "{{ LUNA_API_PROTOCOL }}://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/config/secrets/node/{{ NODE_NAME }}" | grep -v '"message":' > /lunatmp/node.secrets.json
    cat /lunatmp/node.secrets.json | grep -oE '".[^"]+"'|grep -A1 path|grep -v '"path"' | grep -v '^\-\-' > /lunatmp/node.secrets.files.dat
    cat /lunatmp/node.secrets.json | grep -oE '".[^"]+"'|grep -A1 content|grep -v '"content"' > /lunatmp/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r line; do
        if [ "$(echo $line)" == "--" ]; then
           TEL=$[TEL+1]
       else
           echo $line >> /lunatmp/node.secrets.content${TEL}.dat
       fi
    done < /lunatmp/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r file; do
        file=$(echo "${file:1:-1}")
        echo "Luna2: Node secret path: [$file]"
        if [ "$file" ]; then
            if [ "$DECODE" ]; then
                get_secret_content /lunatmp/node.secrets.content${TEL}.dat | base64 -d > /{{ LUNA_SYSTEMROOT }}/$file
            else
                get_secret_content /lunatmp/node.secrets.content${TEL}.dat > /{{ LUNA_SYSTEMROOT }}/$file
            fi
            chmod 600 /{{ LUNA_SYSTEMROOT }}/$file 2> /dev/null
            TEL=$[TEL+1]
        fi
    done < /lunatmp/node.secrets.files.dat
}


## this section contains the download function calls
## it will be rendered based on plugins
## do not remove below line
## FETCH CODE SEGMENT


function download_image {
    update_status "install.download"
    for method in {{ PROVISION_METHOD }} {{ PROVISION_FALLBACK }}; do
        case $method in
            {{ PROVISION_METHOD }})
                if download_{{ PROVISION_METHOD }}; then
                    return 0
                fi
                ;;
            {{ PROVISION_FALLBACK }})
                if download_{{ PROVISION_FALLBACK }}; then
                    return 0
                fi
                ;;
            *)
                echo "Luna2: No suitable provision method available for $method"
                ;;
        esac
    done
    return 1
}

{% if LUNA_SETUPBMC %}
function config_bmc {
    NETCHANNEL=$1
    IPADDRESS=$2
    NETMASK=$3
    GATEWAY=$4
    MGMTCHANNEL=$5
    USERID=$6
    USERNAME=$7
    PASSWORD=$8
    UNMANAGED=$9
## do not remove below line
## BMC CODE SEGMENT
}

function bmcsetup {
    echo "Luna2: bmcsetup"
    update_status "install.setupbmc"
    config_bmc "{{ LUNA_BMC['netchannel'] }}" "{{ LUNA_BMC['ipaddress'] }}" "{{ LUNA_BMC['netmask'] }}" "0.0.0.0" "{{ LUNA_BMC['mgmtchannel'] }}" "{{ LUNA_BMC['userid'] }}" "{{ LUNA_BMC['username'] }}" "{{ LUNA_BMC['password'] }}" "{{ LUNA_UNMANAGED_BMC_USERS }}"
}
{% endif %}

function config_interface {
    DEVICE=$1
    IPADDR=$2
    PREFIX=$3
    NETMASK=$4
    ZONE=$5
    OPTIONS=$6
## do not remove below line
## INTERFACE CODE SEGMENT
}

function config_hostname {
    HOSTNAME=$1
## do not remove below line
## HOSTNAME CODE SEGMENT
}

function config_gateway {
    DEVICE=$1
    GATEWAY=$2
    METRIC=$3
## do not remove below line
## GATEWAY CODE SEGMENT
}

function config_dns {
    DEVICE=$1
    SEARCH=$2
    NAMESERVER=$3
## do not remove below line
## DNS CODE SEGMENT
}

function config_ntp {
    NTPSERVER=$1
## do not remove below line
## NTP CODE SEGMENT
}

function change_net {
    echo "Luna2: change network settings"
    update_status "install.setnet"
    [ -z "$LUNA_OSIMAGE" ] && echo "Luna2: No OsImage. Exiting." && return 0
    config_hostname "{{ NODE_HOSTNAME }}"
    {% for interface in LUNA_INTERFACES %}
        {% if interface == 'BOOTIF' %}
    ######### {{ interface }} #########

    # ${LUNA_BOOTIF} variable should be defined in dracut environment
    # during the boot proces based on mac address: MAC
    if [ -n "${LUNA_BOOTIF}" ]; then
        cat << EOF > /lunatmp/interface_options.b64
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
        echo -n '' > /lunatmp/interface_options.txt
        if [ "$DECODE" ]; then
            cat /lunatmp/interface_options.b64 | base64 -d > /lunatmp/interface_options.txt 2> /dev/null || cat /lunatmp/interface_options.b64 > /lunatmp/interface_options.txt        
        fi
        #cat /lunatmp/interface_options.txt >> ifcfg-${LUNA_BOOTIF}
        OPTIONS=$(cat /lunatmp/interface_options.txt)
        rm -f /lunatmp/interface_options.*
        # ---
        {% if LUNA_INTERFACES[interface]['ipaddress'] %}
        # -- we call a function below that's being generated by interface plugin
        config_interface "${LUNA_BOOTIF}" "{{ LUNA_INTERFACES[interface]['ipaddress'] }}" "{{ LUNA_INTERFACES[interface]['prefix'] }}" "{{ LUNA_INTERFACES[interface]['netmask'] }}" "{{ LUNA_INTERFACES[interface]['zone'] }}" "${OPTIONS}"
        config_gateway "${LUNA_BOOTIF}" "{{ LUNA_INTERFACES[interface]['gateway'] }}" "600"
        config_dns "${LUNA_BOOTIF}" "{{ DOMAIN_SEARCH }}" "{{ NAME_SERVER }}"
        config_ntp "{{ NTP_SERVER }}"
        # --
        {% endif %}
    fi
        {% else %}
    ######### {{ interface }} #########
    cat << EOF > /lunatmp/interface_options.b64
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
        echo -n '' > /lunatmp/interface_options.txt
        if [ "$DECODE" ]; then
            cat /lunatmp/interface_options.b64 | base64 -d > /lunatmp/interface_options.txt 2> /dev/null || cat /lunatmp/interface_options.b64 > /lunatmp/interface_options.txt        
        fi
        OPTIONS=$(cat /lunatmp/interface_options.txt)
        #cat /lunatmp/interface_options.txt >> ifcfg-{{ interface }}
        rm -f /lunatmp/interface_options.*
    # --
            {% if LUNA_INTERFACES[interface]['ipaddress'] %}
    # -- we call a function below that's being generated by interface plugin
    config_interface "{{ interface }}" "{{ LUNA_INTERFACES[interface]['ipaddress'] }}" "{{ LUNA_INTERFACES[interface]['prefix'] }}" "{{ LUNA_INTERFACES[interface]['netmask'] }}" "{{ LUNA_INTERFACES[interface]['zone'] }}" "${OPTIONS}"
                {% if LUNA_INTERFACES[interface]['gateway'] %}
    config_gateway "{{ interface }}" "{{ LUNA_INTERFACES[interface]['gateway'] }}" "100"
                {% endif %}
    # --
            {% endif %}
        {% endif %}
    {% endfor %}
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /{{ LUNA_SYSTEMROOT }}/tmp/fix_capabilities.lst << EOF
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
EOF
    chroot /{{ LUNA_SYSTEMROOT }} /bin/bash -c " \
        while read FILE d CAP; do \
            /usr/sbin/setcap \${CAP} \${FILE}; \
        done < /tmp/fix_capabilities.lst \
    " > /dev/null 2>&1
    rm -rf /{{ LUNA_SYSTEMROOT }}/tmp/fix_capabilities.lst
}

function restore_selinux_context {
    SEPOLICY_FILE=/etc/selinux/targeted/contexts/files/file_contexts
    if [ -f /{{ LUNA_SYSTEMROOT }}/${SEPOLICY_FILE} ]; then
        chroot /{{ LUNA_SYSTEMROOT }} /bin/bash -c "load_policy -i; setfiles -r / ${SEPOLICY_FILE} /" > /{{ LUNA_SYSTEMROOT }}/tmp/restore_con.out 2>&1
    fi
}

function cleanup {
    rm -rf /{{ LUNA_SYSTEMROOT }}/tmp/* &> /dev/null
}

echo "Luna2: installer script"
echo "===================================================================================="
echo "Luna2: nodename is {{ NODE_NAME }}, distribution is {{ LUNA_DISTRIBUTION }}"
echo "===================================================================================="
lunainit
prescript
{% if LUNA_SETUPBMC %}
bmcsetup
{% endif %}
partscript
download_image
unpack_imagefile
change_net
node_secrets
postscript
fix_capabilities
restore_selinux_context
cleanup
update_status "install.success"

# for debugging purposes
cd /luna
cat $0 > /{{ LUNA_SYSTEMROOT }}/root/installer.sh

{% endautoescape  %}
