#!/bin/bash

{% autoescape None %}
export LUNA_TARBALL=''
export LUNA_OSIMAGE=''


#
#        LUNA_CONTROLLER         = data['ipaddress'],
#        LUNA_API_PORT           = data['serverport'],
#        NODE_HOSTNAME           = data['nodehostname'],
#        LUNA_OSIMAGE            = data['osimagename'],
#        LUNA_FILE               = data['tarball'],
#        LUNA_SELINUX_ENABLED    = data['selinux'],
#        LUNA_BMCSETUP           = data['setupbmc'],
#        LUNA_BOOTLOADER         = data['localinstall'],
#        LUNA_LOCALINSTALL       = data['localinstall'],
#        LUNA_UNMANAGED_BMC_USERS= data['unmanaged_bmc_users'],
#        LUNA_INTERFACES         = data['interfaces']
#http://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/files/{{ OSIMAGE_KERNELFILE }}
#


function update_status {
    curl -s "http://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/monitor/{{ NODE_NAME }}/$1"
}

function unpack_tarball {
    update_status "install.unpack"
    echo "Luna: Un-packing tarball"
    cd /sysroot
    if [ -n /luna/{{ LUNA_TARBALL }} ]; then

        # We need the full /etc/{passwd,group} in order
        # to properly extract ACLs from the archive

        mv /etc/passwd /etc/passwd.back
        mv /etc/group /etc/group.back
        tar -I lbzip2 -xf ./{{ LUNA_TARBALL }} ./etc/passwd ./etc/group -C / -P
        
        if grep "^tmpfs" /proc/mounts | grep -q sysroot
        then
            tar -I lbzip2 --no-acls -xf ./{{ LUNA_TARBALL }} && export LUNA_OSIMAGE="yes"
        else
            tar -I lbzip2 --acls -xf ./{{ LUNA_TARBALL }} && export LUNA_OSIMAGE="yes"
        fi

        # Restore dracut's default /etc/{passwd,group}
        mv /etc/passwd.back /etc/passwd
        mv /etc/group.back /etc/group

    else
        echo "Luna: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
    kill -15 $(cat /luna/ltorrent-client.pid)
}

trap unpack_tarball SIGUSR1


function prescript {
    echo "Luna: Running prescript"
    update_status "install.prescript"
    {{ LUNA_PRESCRIPT }}
}

function partscript {
    echo "Luna: Running partscript"
    update_status "install.partscript"
    {{ LUNA_PARTSCRIPT }}
}

function postscript {
    echo "Luna: Running postscript"
    update_status "install.postscript"
    {{ LUNA_POSTSCRIPT }}
}

function download_tarball {
    echo "Luna2: Downloading tarball http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TARBALL }} to /luna/{{ LUNA_TARBALL }}"
    curl -s http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TARBALL }} > /luna/{{ LUNA_TARBALL }}
    cp /luna/{{ LUNA_TARBALL }} /sysroot/{{ LUNA_TARBALL }}
    echo "Luna2: Done"
    echo '' > /luna/ltorrent-client.pid
    unpack_tarball
}

function download_torrent {
    echo "Luna: Downloading torrent" | tee -a /tmp/luna-installer.log
    update_status "install.download"
    curl -s http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TORRENT }} > /luna/{{ LUNA_TORRENT }}
    > /luna/ltorrent-client.pid
        /luna/ltorrent-client -t /luna/{{ LUNA_TORRENT }} -p $$ -f /luna/ltorrent-client.pid &
        while [ -f /luna/ltorrent-client.pid ] ; do
            sleep 1
        done
        rm -f /sysroot/{{ LUNA_TARBALL }}
    while [ -f /luna/ltorrent-client.pid ] ; do
        sleep 1
    done
    rm -rf /sysroot/{{ LUNA_TARBALL }}
#    rm -rf /luna/{{ LUNA_TORRENT }}
}
{% if LUNA_SETUPBMC %}
function bmcsetup {
    echo "Luna: bmcsetup"
    update_status "install.setupbmc"
    modprobe ipmi_devintf
    modprobe ipmi_si
    modprobe ipmi_msghandler
    sleep 2
    if ls /dev/ipmi* 1> /dev/null 2>&1
    then
        RESETIPMI=0
        {% if 'BMC' in LUNA_INTERFACES %}
        IPMITOOL="`ipmitool lan print`"
        CUR_IPSRC=`echo "${IPMITOOL}" | grep -e "^IP Address Source" | awk '{ print $5 }'`
        CUR_IPADDR=`echo "${IPMITOOL}" | grep -e "^IP Address.*: [0-9]" | awk '{ print $4 }'`
        CUR_NETMASK=`echo "${IPMITOOL}" | grep -e "^Subnet Mask" | awk '{ print $4 }'`
        CUR_DEFGW=`echo "${IPMITOOL}" | grep -e "^Default Gateway IP" | awk '{ print $5 }'`
        if [[ "${CUR_IPSRC}" != "Static" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} ipsrc static
        fi
        if [[ "${CUR_IPADDR}" != "{{ LUNA_INTERFACES['BMC']['ipaddress'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} ipaddr {{ LUNA_INTERFACES['BMC']['ipaddress'] }}
        fi
        if [[ "${CUR_NETMASK}" != "{{ LUNA_INTERFACES['BMC']['netmask'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} netmask {{ LUNA_INTERFACES['BMC']['netmask'] }}
        fi
        if [[ "${CUR_DEFGW}" != "0.0.0.0" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} defgw ipaddr 0.0.0.0
        fi
        {% endif %}
        ipmitool user set name {{ LUNA_BMC['userid'] }} {{ LUNA_BMC['user'] }}
        ipmitool user set password {{ LUNA_BMC['userid'] }} {{ LUNA_BMC['password'] }}
        ipmitool channel setaccess {{ LUNA_BMC['mgmtchannel'] }} {{ LUNA_BMC['userid'] }} link=on ipmi=on callin=on privilege=4
        ipmitool user enable {{ LUNA_BMC['userid'] }}
        if [[ "${RESETIPMI}" == "1" ]]
        then
            ipmitool mc reset cold
        fi
    fi
}
{% endif %}
function change_net {
    echo "Luna: change network settings"
    update_status "install.setnet"
    [ -z "$LUNA_OSIMAGE" ] && echo "Luna: No OsImage. Exiting." && return 0
    cd /sysroot
    echo "{{ NODE_HOSTNAME }}" > /proc/sys/kernel/hostname
    echo "HOSTNAME={{ NODE_HOSTNAME }}" >> etc/sysconfig/network
    echo "{{ NODE_HOSTNAME }}" > etc/hostname
    pushd etc/sysconfig/network-scripts
    {% for interface in LUNA_INTERFACES %}
        {% if interface == 'BOOTIF' %}
    ######### {{ interface }} #########

    # ${LUNA_BOOTIF} variable should be defined in dracut environment
    # during the boot proces based on mac address: MAC
    if [ -n "${LUNA_BOOTIF}" ]; then
        echo DEVICE=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        echo NAME=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        {% if LUNA_INTERFACES[interface]['ipaddress'] %}
        echo IPADDR={{ LUNA_INTERFACES[interface]['ipaddress'] }} >> ifcfg-${LUNA_BOOTIF}
        echo PREFIX={{ LUNA_INTERFACES[interface]['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        echo NETMASK={{ LUNA_INTERFACES[interface]['netmask'] }} >> ifcfg-${LUNA_BOOTIF}
        {% endif %}
        {% if '6' in LUNA_INTERFACES[interface].keys() and LUNA_INTERFACES[interface]['6']['ipaddress'] %}
        echo IPV6INIT=yes >> ifcfg-${LUNA_BOOTIF}
        echo IPV6ADDR={{ LUNA_INTERFACES[interface]['6']['ipaddress'] }}/{{ LUNA_INTERFACES[interface]['6']['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        {% endif %}
        cat << EOF >> ifcfg-${LUNA_BOOTIF}
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
    fi
        {% elif interface != 'BMC' %}
    ######### {{ interface }} #########
    echo DEVICE={{ interface }} >> ifcfg-{{ interface }}
    echo NAME={{ interface }} >> ifcfg-{{ interface }}
            {% if LUNA_INTERFACES[interface]['ipaddress'] %}
    echo IPADDR={{ LUNA_INTERFACES[interface]['ipaddress'] }} >> ifcfg-{{ interface }}
    echo PREFIX={{ LUNA_INTERFACES[interface]['prefix'] }} >> ifcfg-{{ interface }}
    echo NETMASK={{ LUNA_INTERFACES[interface]['netmask'] }} >> ifcfg-{{ interface }}
            {% endif %}
            {% if '6' in LUNA_INTERFACES[interface].keys() and LUNA_INTERFACES[interface]['6']['ipaddress'] %}
    echo IPV6INIT=yes >> ifcfg-{{ interface }}
    echo IPV6ADDR={{ LUNA_INTERFACES[interface]['6']['ipaddress'] }}/{{ LUNA_INTERFACES[interface]['6']['prefix'] }} >> ifcfg-{{ interface }}
            {% endif %}
    cat << EOF >> ifcfg-{{ interface }}
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
        {% endif %}
    {% endfor %}
    popd
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /sysroot/tmp/fix_capabilities.lst << EOF
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
EOF
#    chroot /sysroot /bin/bash -c " \
#        while read FILE d CAP; do \
#            /usr/sbin/setcap \${CAP} \${FILE}; \
#        done < /tmp/fix_capabilities.lst \
#    " >/dev/null 2>&1
#    rm -rf /sysroot/tmp/fix_capabilities.lst
}

function restore_selinux_context {
    SEPOLICY_FILE=/etc/selinux/targeted/contexts/files/file_contexts
    if [ -f /sysroot/${SEPOLICY_FILE} ]; then
        chroot /sysroot /bin/bash -c "load_policy -i; setfiles -r / ${SEPOLICY_FILE} /"
    fi
}

echo "Luna2: installer script"
prescript
{% if LUNA_SETUPBMC %}
bmcsetup
{% endif %}
partscript
#download_torrent
download_tarball
change_net
postscript
fix_capabilities
restore_selinux_context
update_status "install.success"

{% endautoescape  %}
