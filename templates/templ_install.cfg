#!/bin/bash

{% autoescape None %}
export LUNA_TARBALL=''
export LUNA_OSIMAGE=''
export LUNA_TOKEN="{{ LUNA_TOKEN }}"
export DECODE=""

base64 --help &> /dev/null
if [ "$?" == "0" ]; then
    DECODE=1
fi
if [ ! "$DECODE" ]; then
    echo "Luna2: --WARNING-- base64 decoder not available. This will impair the installer"
fi

function update_status {
    json='{"monitor": { "status": { "{{ NODE_NAME }}": { "state": "'$1'" } } } }'
    curl -X POST -H "x-access-tokens: $LUNA_TOKEN" -H "Content-Type: application/json" -d "$json" -s "http://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/monitor/status/{{ NODE_NAME }}"
}

function unpack_tarball {
    update_status "install.unpack"
    echo "Luna2: Un-packing tarball"
    cd /sysroot
    if [ -n /sysroot/{{ LUNA_TARBALL }} ]; then

        # We need the full /etc/{passwd,group} in order
        # to properly extract ACLs from the archive

        mv /etc/passwd /etc/passwd.back
        mv /etc/group /etc/group.back
        tar -I lbzip2 -xf ./{{ LUNA_TARBALL }} ./etc/passwd ./etc/group -C / -P
        
        if grep "^tmpfs" /proc/mounts | grep -q sysroot
        then
            tar -I lbzip2 --no-acls -xf ./{{ LUNA_TARBALL }} 2> /tmp/tar.out && export LUNA_OSIMAGE="yes"
        else
            tar -I lbzip2 --acls -xf ./{{ LUNA_TARBALL }} 2> /tmp/tar.out && export LUNA_OSIMAGE="yes"
        fi

        # Restore dracut's default /etc/{passwd,group}
        mv /etc/passwd.back /etc/passwd
        mv /etc/group.back /etc/group

        rm -rf /sysroot/{{ LUNA_TARBALL }}
    else
        echo "Luna2: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
#    kill -15 $(cat /luna/ltorrent-client.pid) 2> /dev/null
}

trap unpack_tarball SIGUSR1


function prescript {
    echo "Luna2: Running prescript"
    update_status "install.prescript"
cat << EOF > /luna/prescript.b64
{{ LUNA_PRESCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /luna/prescript.b64 | base64 -d > /luna/prescript.sh 2> /dev/null || cat /luna/prescript.b64 > /luna/prescript.sh 
        bash /luna/prescript.sh
    fi
}

function partscript {
    echo "Luna2: Running partscript"
    update_status "install.partscript"
cat << EOF > /luna/partscript.b64
{{ LUNA_PARTSCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /luna/partscript.b64 | base64 -d > /luna/partscript.sh 2> /dev/null || cat /luna/partscript.b64 > /luna/partscript.sh 
        bash /luna/partscript.sh
    fi
}

function postscript {
    echo "Luna2: Running postscript"
    update_status "install.postscript"
cat << EOF > /luna/postscript.b64
{{ LUNA_POSTSCRIPT }}
EOF
    if [ "$DECODE" ]; then
        cat /luna/postscript.b64 | base64 -d > /luna/postscript.sh 2> /dev/null || cat /luna/postscript.b64 > /luna/postscript.sh 
        bash /luna/postscript.sh
    fi
}

function get_secret_content {
    FILE=$1
    if [ ! -s $FILE ]; then
        echo
        return 1
    fi
    CONTENT=$(cat $FILE)
    CONTENT=$(echo "${CONTENT:1:-1}")

    BASH_COMPAT=4.2
    CONTENT=$(echo "${CONTENT//\\\\/\\}")

    awk '{
      n = split($0, t, "\\\\n")
      for (i = 0; ++i <= n;)
#        print i, t[i]
        print t[i]
      }' <<< $CONTENT
}

function node_secrets {
    update_status "install.secrets"

    curl -H "x-access-tokens: $LUNA_TOKEN" -s "http://{{ LUNA_CONTROLLER }}:{{ LUNA_API_PORT }}/config/secrets/node/{{ NODE_NAME }}" | grep -v '"message":' > /luna/node.secrets.json
    cat /luna/node.secrets.json | grep -oE '".[^"]+"'|grep -A1 path|grep -v '"path"' | grep -v '^\-\-' > /luna/node.secrets.files.dat
    cat /luna/node.secrets.json | grep -oE '".[^"]+"'|grep -A1 content|grep -v '"content"' > /luna/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r line; do
        if [ "$(echo $line)" == "--" ]; then
           TEL=$[TEL+1]
       else
           echo $line >> /luna/node.secrets.content${TEL}.dat
       fi
    done < /luna/node.secrets.contents.dat

    TEL=0
    while IFS='' read -r file; do
        file=$(echo "${file:1:-1}")
        echo "Luna2: Node secret path: [$file]"
        if [ "$file" ]; then
            if [ "$DECODE" ]; then
                get_secret_content /luna/node.secrets.content${TEL}.dat | base64 -d > /sysroot/$file
            else
                get_secret_content /luna/node.secrets.content${TEL}.dat > /sysroot/$file
            fi
            chmod 600 /sysroot/$file 2> /dev/null
            TEL=$[TEL+1]
        fi
    done < /luna/node.secrets.files.dat
}


function download_tarball {
    echo "Luna2: Downloading tarball http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TARBALL }} to /sysroot/{{ LUNA_TARBALL }}"
    update_status "install.download"
    curl -s http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TARBALL }} > /sysroot/{{ LUNA_TARBALL }}
    return $?
}

function download_torrent {
    echo "Luna2: Downloading torrent" | tee -a /tmp/luna-installer.log
    update_status "install.download"
    cd /sysroot
    aria2c --seed-time=0 --enable-dht=false --max-connection-per-server=2 --bt-stop-timeout=300 http://{{ LUNA_CONTROLLER }}:{{ WEBSERVER_PORT }}/files/{{ LUNA_TORRENT }}
    ret=$?
    rm -f {{ LUNA_TORRENT }} *.aria 2> /dev/null
    return $ret
}

function download_image {
    for method in {{ PROVISION_METHOD }} {{ PROVISION_FALLBACK }}; do
        case $method in
            torrent)
                if download_torrent; then
                    return 0
                fi
                ;;
            http)
                if download_tarball; then
                    return 0
                fi
                ;;
            *)
                echo "Luna2: No suitable provision method available for $method"
                ;;
        esac
    done
    return 1
}


{% if LUNA_SETUPBMC %}
function bmcsetup {
    echo "Luna2: bmcsetup"
    update_status "install.setupbmc"
    modprobe ipmi_devintf
    modprobe ipmi_si
    modprobe ipmi_msghandler
    sleep 2
    if ls /dev/ipmi* 1> /dev/null 2>&1
    then
        RESETIPMI=0
        IPMITOOL="`ipmitool lan print`"
        CUR_IPSRC=`echo "${IPMITOOL}" | grep -e "^IP Address Source" | awk '{ print $5 }'`
        CUR_IPADDR=`echo "${IPMITOOL}" | grep -e "^IP Address.*: [0-9]" | awk '{ print $4 }'`
        CUR_NETMASK=`echo "${IPMITOOL}" | grep -e "^Subnet Mask" | awk '{ print $4 }'`
        CUR_DEFGW=`echo "${IPMITOOL}" | grep -e "^Default Gateway IP" | awk '{ print $5 }'`
        if [[ "${CUR_IPSRC}" != "Static" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} ipsrc static
        fi
        if [[ "${CUR_IPADDR}" != "{{ LUNA_BMC['ipaddress'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} ipaddr {{ LUNA_BMC['ipaddress'] }}
        fi
        if [[ "${CUR_NETMASK}" != "{{ LUNA_BMC['netmask'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} netmask {{ LUNA_BMC['netmask'] }}
        fi
        if [[ "${CUR_DEFGW}" != "0.0.0.0" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ LUNA_BMC['netchannel'] }} defgw ipaddr 0.0.0.0
        fi
        case "{{ LUNA_UNMANAGED_BMC_USERS }}" in
            delete)
                for userid in $(ipmitool user list 1|grep -oE '^[0-9]+\s{1,10}.[^ ]+'|grep -oE '^[0-9]+'); do
                    ipmitool user disable $userid
                done
                ;;
            disable)
                for userid in $(ipmitool user list 1|grep -oE '^[0-9]+\s{1,10}.[^ ]+'|grep -oE '^[0-9]+'); do
                    ipmitool user disable $userid
                done
                ;;
        esac
        ipmitool user set name {{ LUNA_BMC['userid'] }} {{ LUNA_BMC['username'] }}
        ipmitool user set password {{ LUNA_BMC['userid'] }} {{ LUNA_BMC['password'] }}
        ipmitool channel setaccess {{ LUNA_BMC['mgmtchannel'] }} {{ LUNA_BMC['userid'] }} link=on ipmi=on callin=on privilege=4
        ipmitool user enable {{ LUNA_BMC['userid'] }}
        if [[ "${RESETIPMI}" == "1" ]]
        then
            ipmitool mc reset cold
        fi
    fi
}
{% endif %}
function change_net {
    echo "Luna2: change network settings"
    update_status "install.setnet"
    [ -z "$LUNA_OSIMAGE" ] && echo "Luna2: No OsImage. Exiting." && return 0
    cd /sysroot
    echo "{{ NODE_HOSTNAME }}" > /proc/sys/kernel/hostname
    echo "HOSTNAME={{ NODE_HOSTNAME }}" >> etc/sysconfig/network
    echo "{{ NODE_HOSTNAME }}" > etc/hostname
    pushd etc/sysconfig/network-scripts
    {% for interface in LUNA_INTERFACES %}
        {% if interface == 'BOOTIF' %}
    ######### {{ interface }} #########

    # ${LUNA_BOOTIF} variable should be defined in dracut environment
    # during the boot proces based on mac address: MAC
    if [ -n "${LUNA_BOOTIF}" ]; then
        echo DEVICE=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        echo NAME=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        {% if LUNA_INTERFACES[interface]['ipaddress'] %}
        echo IPADDR={{ LUNA_INTERFACES[interface]['ipaddress'] }} >> ifcfg-${LUNA_BOOTIF}
        echo PREFIX={{ LUNA_INTERFACES[interface]['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        echo NETMASK={{ LUNA_INTERFACES[interface]['netmask'] }} >> ifcfg-${LUNA_BOOTIF}
        {% endif %}
        {% if '6' in LUNA_INTERFACES[interface].keys() and LUNA_INTERFACES[interface]['6']['ipaddress'] %}
        echo IPV6INIT=yes >> ifcfg-${LUNA_BOOTIF}
        echo IPV6ADDR={{ LUNA_INTERFACES[interface]['6']['ipaddress'] }}/{{ LUNA_INTERFACES[interface]['6']['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        {% endif %}
        cat << EOF > /luna/interface_options.b64
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
        echo -n '' > /luna/interface_options.txt
        if [ "$DECODE" ]; then
            cat /luna/interface_options.b64 | base64 -d > /luna/interface_options.txt 2> /dev/null || cat /luna/interface_options.b64 > /luna/interface_options.txt        
        fi
        cat /luna/interface_options.txt >> ifcfg-${LUNA_BOOTIF}
        rm -f /luna/interface_options.*
    fi
        {% else %}
    ######### {{ interface }} #########
    echo DEVICE={{ interface }} >> ifcfg-{{ interface }}
    echo NAME={{ interface }} >> ifcfg-{{ interface }}
            {% if LUNA_INTERFACES[interface]['ipaddress'] %}
    echo IPADDR={{ LUNA_INTERFACES[interface]['ipaddress'] }} >> ifcfg-{{ interface }}
    echo PREFIX={{ LUNA_INTERFACES[interface]['prefix'] }} >> ifcfg-{{ interface }}
    echo NETMASK={{ LUNA_INTERFACES[interface]['netmask'] }} >> ifcfg-{{ interface }}
            {% endif %}
            {% if '6' in LUNA_INTERFACES[interface].keys() and LUNA_INTERFACES[interface]['6']['ipaddress'] %}
    echo IPV6INIT=yes >> ifcfg-{{ interface }}
    echo IPV6ADDR={{ LUNA_INTERFACES[interface]['6']['ipaddress'] }}/{{ LUNA_INTERFACES[interface]['6']['prefix'] }} >> ifcfg-{{ interface }}
            {% endif %}
    cat << EOF > /luna/interface_options.b64
{{ LUNA_INTERFACES[interface]['options'] }}
EOF
        echo -n '' > /luna/interface_options.txt
        if [ "$DECODE" ]; then
            cat /luna/interface_options.b64 | base64 -d > /luna/interface_options.txt 2> /dev/null || cat /luna/interface_options.b64 > /luna/interface_options.txt        
        fi
        cat /luna/interface_options.txt >> ifcfg-{{ interface }}
        rm -f /luna/interface_options.*
        {% endif %}
    {% endfor %}
    popd
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /sysroot/tmp/fix_capabilities.lst << EOF
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
EOF
    chroot /sysroot /bin/bash -c " \
        while read FILE d CAP; do \
            /usr/sbin/setcap \${CAP} \${FILE}; \
        done < /tmp/fix_capabilities.lst \
    " > /dev/null 2>&1
    rm -rf /sysroot/tmp/fix_capabilities.lst
}

function restore_selinux_context {
    SEPOLICY_FILE=/etc/selinux/targeted/contexts/files/file_contexts
    if [ -f /sysroot/${SEPOLICY_FILE} ]; then
        chroot /sysroot /bin/bash -c "load_policy -i; setfiles -r / ${SEPOLICY_FILE} /" > /sysroot/tmp/restore_con.out 2>&1
    fi
}

echo "Luna2: installer script"
echo "===================================================================================="
echo "Luna2: nodename is {{ NODE_NAME }}, distribution is {{ LUNA_DISTRIBUTION }}"
echo "===================================================================================="
prescript
{% if LUNA_SETUPBMC %}
bmcsetup
{% endif %}
partscript
download_image
##download_torrent || download_tarball
unpack_tarball
change_net
node_secrets
postscript
fix_capabilities
restore_selinux_context
update_status "install.success"

# for debugging purposes
#cd /luna
#cat $0 > /sysroot/root/installer.sh

{% endautoescape  %}
