#!/bin/bash

{% autoescape None %}
export LUNA_TARBALL=''
export LUNA_OSIMAGE=''

function update_status {
    curl -s "{{ p['protocol'] }}://{{ p['server_ip'] }}:{{ p['server_port'] }}/luna?step=install&node={{ p['name'] }}&status=$1"
}

function unpack_tarball {
    update_status "install.unpack"
    echo "Luna: Un-packing tarball"
    cd /sysroot
    if [ -n /luna/{{ p['torrent'] }} ]; then

        # We need the full /etc/{passwd,group} in order
        # to properly extract ACLs from the archive

        mv /etc/passwd /etc/passwd.back
        mv /etc/group /etc/group.back
        tar -I lbzip2 -xf ./{{ p['tarball'] }} ./etc/passwd ./etc/group -C / -P
        
        if grep "^tmpfs" /proc/mounts | grep -q sysroot
        then
            tar -I lbzip2 --no-acls -xf ./{{ p['tarball'] }} && export LUNA_OSIMAGE="yes"
        else
            tar -I lbzip2 --acls -xf ./{{ p['tarball'] }} && export LUNA_OSIMAGE="yes"
        fi

        # Restore dracut's default /etc/{passwd,group}
        mv /etc/passwd.back /etc/passwd
        mv /etc/group.back /etc/group

    else
        echo "Luna: error downloading OsImage. Entering service mode."
        while true; do sleep 5 ;done
    fi
    kill -15 $(cat /luna/ltorrent-client.pid)
}

trap unpack_tarball SIGUSR1


function prescript {
    echo "Luna: Running prescript"
    update_status "install.prescript"
    {{ p['prescript'] }}
}

function partscript {
    echo "Luna: Running partscript"
    update_status "install.partscript"
    {{ p['partscript'] }}
}

function postscript {
    echo "Luna: Running postscript"
    update_status "install.postscript"
    {{ p['postscript'] }}
}

function download_torrent {
    echo "Luna: Downloading torrent" | tee -a /tmp/luna-installer.log
    update_status "install.download"
    curl -s {{ p['protocol'] }}://{{ p['server_ip'] }}:{{ p['server_port'] }}/torrents/{{ p['torrent'] }} > /luna/{{ p['torrent'] }}
    cd /sysroot
    > /luna/ltorrent-client.pid
    {% if bool(p['torrent_if']) %}
        {% if p['torrent_if'] != p['boot_if'] %}
            /usr/sbin/ip a add {{ p['torrent_if_ip'] }}/{{ p['torrent_if_net_mask'] }} dev {{ p['torrent_if'] }}
        {% end %}
        if ping -c 1 {{ p['torrent_if_ip'] }} >/dev/null 2>&1; then
            /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -b {{ p['torrent_if_ip'] }} -f /luna/ltorrent-client.pid &
        else
            /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -f /luna/ltorrent-client.pid &
        fi
        while [ -f /luna/ltorrent-client.pid ] ; do
            sleep 1
        done
        rm -f /sysroot/{{ p['tarball'] }}
        {% if p['torrent_if'] != p['boot_if'] %}
                /usr/sbin/ip addr flush {[ p['torrent_if'] }}
                /usr/sbin/ip link set dev {{ p['torrent_if'] }} down
        {% end %}
    {% else %}
        /luna/ltorrent-client -t /luna/{{ p['torrent'] }} -p $$ -f /luna/ltorrent-client.pid &
    {% end %}
    while [ -f /luna/ltorrent-client.pid ] ; do
        sleep 1
    done
    rm -rf /sysroot/{{ p['tarball'] }}

}
{% if bool(p['bmcsetup']) and p['setupbmc'] %}
function bmcsetup {
    echo "Luna: bmcsetup"
    update_status "install.setupbmc"
    modprobe ipmi_devintf
    modprobe ipmi_si
    modprobe ipmi_msghandler
    sleep 2
    if ls /dev/ipmi* 1> /dev/null 2>&1
    then
        RESETIPMI=0
        {% if 'BMC' in p['interfaces'] %}
        IPMITOOL="`ipmitool lan print`"
        CUR_IPSRC=`echo "${IPMITOOL}" | grep -e "^IP Address Source" | awk '{ print $5 }'`
        CUR_IPADDR=`echo "${IPMITOOL}" | grep -e "^IP Address.*: [0-9]" | awk '{ print $4 }'`
        CUR_NETMASK=`echo "${IPMITOOL}" | grep -e "^Subnet Mask" | awk '{ print $4 }'`
        CUR_DEFGW=`echo "${IPMITOOL}" | grep -e "^Default Gateway IP" | awk '{ print $5 }'`
        if [[ "${CUR_IPSRC}" != "Static" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ p['bmcsetup']['netchannel'] }} ipsrc static
        fi
        if [[ "${CUR_IPADDR}" != "{{ p['interfaces']['BMC']['4']['ip'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ p['bmcsetup']['netchannel'] }} ipaddr {{ p['interfaces']['BMC']['4']['ip'] }}
        fi
        if [[ "${CUR_NETMASK}" != "{{ p['interfaces']['BMC']['4']['netmask'] }}" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ p['bmcsetup']['netchannel'] }} netmask {{ p['interfaces']['BMC']['4']['netmask'] }}
        fi
        if [[ "${CUR_DEFGW}" != "0.0.0.0" ]]
        then
            RESETIPMI=1
            ipmitool lan set {{ p['bmcsetup']['netchannel'] }} defgw ipaddr 0.0.0.0
        fi
        {% end %}
        ipmitool user set name {{ p['bmcsetup']['userid'] }} {{ p['bmcsetup']['user'] }}
        ipmitool user set password {{ p['bmcsetup']['userid'] }} {{ p['bmcsetup']['password'] }}
        ipmitool channel setaccess {{ p['bmcsetup']['mgmtchannel'] }} {{ p['bmcsetup']['userid'] }} link=on ipmi=on callin=on privilege=4
        ipmitool user enable {{ p['bmcsetup']['userid'] }}
        if [[ "${RESETIPMI}" == "1" ]]
        then
            ipmitool mc reset cold
        fi
    fi
}
{% end %}
function change_net {
    echo "Luna: change network settings"
    update_status "install.setnet"
    [ -z "$LUNA_OSIMAGE" ] && echo "Luna: No OsImage. Exiting." && return 0
    cd /sysroot
    echo "{{ p['hostname'] }}" > /proc/sys/kernel/hostname
    echo "HOSTNAME={{ p['hostname'] }}" >> etc/sysconfig/network
    echo "{{ p['hostname'] }}" > etc/hostname
    pushd etc/sysconfig/network-scripts
    {% for interface in p['interfaces'] %}
        {% if interface == 'BOOTIF' %}
    ######### {{ interface }} #########

    # ${LUNA_BOOTIF} variable should be defined in dracut environment
    # during the boot proces based on mac address: {{ p['mac'] }}
    if [ -n "${LUNA_BOOTIF}" ]; then
        echo DEVICE=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        echo NAME=${LUNA_BOOTIF} >> ifcfg-${LUNA_BOOTIF}
        {% if p['interfaces'][interface]['4']['ip'] %}
        echo IPADDR={{ p['interfaces'][interface]['4']['ip'] }} >> ifcfg-${LUNA_BOOTIF}
        echo PREFIX={{ p['interfaces'][interface]['4']['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        echo NETMASK={{ p['interfaces'][interface]['4']['netmask'] }} >> ifcfg-${LUNA_BOOTIF}
        {% end %}
        {% if p['interfaces'][interface]['6']['ip'] %}
        echo IPV6INIT=yes >> ifcfg-${LUNA_BOOTIF}
        echo IPV6ADDR={{ p['interfaces'][interface]['6']['ip'] }}/{{ p['interfaces'][interface]['6']['prefix'] }} >> ifcfg-${LUNA_BOOTIF}
        {% end %}
        cat << EOF >> ifcfg-${LUNA_BOOTIF}
{{ p['interfaces'][interface]['options'] }}
EOF
    fi
        {% elif interface != 'BMC' %}
    ######### {{ interface }} #########
    echo DEVICE={{ interface }} >> ifcfg-{{ interface }}
    echo NAME={{ interface }} >> ifcfg-{{ interface }}
            {% if p['interfaces'][interface]['4']['ip'] %}
    echo IPADDR={{ p['interfaces'][interface]['4']['ip'] }} >> ifcfg-{{ interface }}
    echo PREFIX={{ p['interfaces'][interface]['4']['prefix'] }} >> ifcfg-{{ interface }}
    echo NETMASK={{ p['interfaces'][interface]['4']['netmask'] }} >> ifcfg-{{ interface }}
            {% end %}
            {% if p['interfaces'][interface]['6']['ip'] %}
    echo IPV6INIT=yes >> ifcfg-{{ interface }}
    echo IPV6ADDR={{ p['interfaces'][interface]['6']['ip'] }}/{{ p['interfaces'][interface]['6']['prefix'] }} >> ifcfg-{{ interface }}
            {% end %}
    cat << EOF >> ifcfg-{{ interface }}
{{ p['interfaces'][interface]['options'] }}
EOF
        {% end %}
    {% end %}
    popd
}

function fix_capabilities {
    # tar issue is not fixed yet
    # https://bugzilla.redhat.com/show_bug.cgi?id=771927
    # here is the list of know capabilities:
    # find / -type f -exec getcap '{}' \;
    cat >> /sysroot/tmp/fix_capabilities.lst << EOF
/usr/bin/ping = cap_net_admin,cap_net_raw+p
/usr/bin/ping6 = cap_net_admin,cap_net_raw+p
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep
/usr/sbin/arping = cap_net_raw+p
/usr/sbin/clockdiff = cap_net_raw+p
/usr/sbin/fping = cap_net_raw+ep
/usr/sbin/mtr = cap_net_raw+ep
/usr/sbin/fping6 = cap_net_raw+ep
/usr/sbin/suexec = cap_setgid,cap_setuid+ep
EOF
    chroot /sysroot /bin/bash -c " \
        while read FILE d CAP; do \
            /usr/sbin/setcap \${CAP} \${FILE}; \
        done < /tmp/fix_capabilities.lst \
    " >/dev/null 2>&1
    rm -rf /sysroot/tmp/fix_capabilities.lst
}

function restore_selinux_context {
    SEPOLICY_FILE=/etc/selinux/targeted/contexts/files/file_contexts
    if [ -f /sysroot/${SEPOLICY_FILE} ]; then
        chroot /sysroot /bin/bash -c "load_policy -i; setfiles -r / ${SEPOLICY_FILE} /"
    fi
}

prescript
{% if bool(p['bmcsetup']) and p['setupbmc'] %}
bmcsetup
{% end %}
partscript
download_torrent
change_net
postscript
fix_capabilities
restore_selinux_context
update_status "install.success"
